<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SWRLContentViewController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SWRLContentViewController</TokenIdentifier>
			<Abstract type="html">The SWRLContentViewController class defines the view controller used for presenting interstitial content.
This class can be subclassed in order to customize some of its look and feel and behavior.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
            
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setWebViewController:</TokenIdentifier>
			<Abstract type="html">The UIViewController that contains the webView</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIViewController *webViewController</Declaration>
			
			
			<Anchor>//api/name/webViewController</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/webViewController</TokenIdentifier>
			<Abstract type="html">The UIViewController that contains the webView</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIViewController *webViewController</Declaration>
			
			
			<Anchor>//api/name/webViewController</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/webViewController</TokenIdentifier>
			<Abstract type="html">The UIViewController that contains the webView</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIViewController *webViewController</Declaration>
			
			
			<Anchor>//api/name/webViewController</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setWebView:</TokenIdentifier>
			<Abstract type="html">The UIWebView for rendering html content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIWebView *webView</Declaration>
			
			
			<Anchor>//api/name/webView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/webView</TokenIdentifier>
			<Abstract type="html">The UIWebView for rendering html content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIWebView *webView</Declaration>
			
			
			<Anchor>//api/name/webView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/webView</TokenIdentifier>
			<Abstract type="html">The UIWebView for rendering html content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) UIWebView *webView</Declaration>
			
			
			<Anchor>//api/name/webView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setContent:</TokenIdentifier>
			<Abstract type="html">The SWRLContent object that is being loaded.  If this is nil, then the most recent content in the content
history will be used.  If there is not such content, then the emptyContentHtml will be used.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SWRLContent *content</Declaration>
			
			
			<Anchor>//api/name/content</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/content</TokenIdentifier>
			<Abstract type="html">The SWRLContent object that is being loaded.  If this is nil, then the most recent content in the content
history will be used.  If there is not such content, then the emptyContentHtml will be used.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SWRLContent *content</Declaration>
			
			
			<Anchor>//api/name/content</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/content</TokenIdentifier>
			<Abstract type="html">The SWRLContent object that is being loaded.  If this is nil, then the most recent content in the content
history will be used.  If there is not such content, then the emptyContentHtml will be used.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) SWRLContent *content</Declaration>
			
			
			<Anchor>//api/name/content</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setToolbarItems:</TokenIdentifier>
			<Abstract type="html">The current array of toolbar items for the webview</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *toolbarItems</Declaration>
			
			
			<Anchor>//api/name/toolbarItems</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/toolbarItems</TokenIdentifier>
			<Abstract type="html">The current array of toolbar items for the webview</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *toolbarItems</Declaration>
			
			
			<Anchor>//api/name/toolbarItems</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/toolbarItems</TokenIdentifier>
			<Abstract type="html">The current array of toolbar items for the webview</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *toolbarItems</Declaration>
			
			
			<Anchor>//api/name/toolbarItems</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setEmptyContentHtml:</TokenIdentifier>
			<Abstract type="html">The html string to display when there is no content to show.  The default screen is white page with
gray text that says No Content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *emptyContentHtml</Declaration>
			
			
			<Anchor>//api/name/emptyContentHtml</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/emptyContentHtml</TokenIdentifier>
			<Abstract type="html">The html string to display when there is no content to show.  The default screen is white page with
gray text that says No Content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *emptyContentHtml</Declaration>
			
			
			<Anchor>//api/name/emptyContentHtml</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/emptyContentHtml</TokenIdentifier>
			<Abstract type="html">The html string to display when there is no content to show.  The default screen is white page with
gray text that says No Content.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *emptyContentHtml</Declaration>
			
			
			<Anchor>//api/name/emptyContentHtml</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setLoadingView:</TokenIdentifier>
			<Abstract type="html">The current loading view.  This can be overridden if different behavior is desired.  The
default loading view displays a 20% black mask with a white spinner.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/loadingView</TokenIdentifier>
			<Abstract type="html">The current loading view.  This can be overridden if different behavior is desired.  The
default loading view displays a 20% black mask with a white spinner.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/loadingView</TokenIdentifier>
			<Abstract type="html">The current loading view.  This can be overridden if different behavior is desired.  The
default loading view displays a 20% black mask with a white spinner.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/setCloseHandler:</TokenIdentifier>
			<Abstract type="html">The close handler is called when the user hits the &apos;X&apos; and during the completion for
dismissViewControllerAnimated:</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( void ) closeHandler</Declaration>
			
			
			<Anchor>//api/name/closeHandler</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/closeHandler</TokenIdentifier>
			<Abstract type="html">The close handler is called when the user hits the &apos;X&apos; and during the completion for
dismissViewControllerAnimated:</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( void ) closeHandler</Declaration>
			
			
			<Anchor>//api/name/closeHandler</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SWRLContentViewController/closeHandler</TokenIdentifier>
			<Abstract type="html">The close handler is called when the user hits the &apos;X&apos; and during the completion for
dismissViewControllerAnimated:</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( void ) closeHandler</Declaration>
			
			
			<Anchor>//api/name/closeHandler</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/loadContent:completion:</TokenIdentifier>
			<Abstract type="html">loadContent is called by the SWRLContentManager when content is received.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>- (void)loadContent:(SWRLContent *)content completion:(void ( ^ ) ( NSError *))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>content</Name>
					<Abstract type="html">The content to load.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">The block that is executed with the content load completes (or fails).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadContent:completion:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/willShowLoadingView:</TokenIdentifier>
			<Abstract type="html">Called before the loading view is shown.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>- (void)willShowLoadingView:(UIView *)loadingView</Declaration>
			<Parameters>
				<Parameter>
					<Name>loadingView</Name>
					<Abstract type="html">By default this is the maskView.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/willShowLoadingView:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/didHideLoadingView:</TokenIdentifier>
			<Abstract type="html">Called after the loading view has been hidden.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>- (void)didHideLoadingView:(UIView *)loadingView</Declaration>
			<Parameters>
				<Parameter>
					<Name>loadingView</Name>
					<Abstract type="html">By default this is the maskView.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didHideLoadingView:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SWRLContentViewController/close:</TokenIdentifier>
			<Abstract type="html">Called to close the view.</Abstract>
			<DeclaredIn>SWRLContentViewController.h</DeclaredIn>
			
			<Declaration>- (void)close:(id)sender</Declaration>
			<Parameters>
				<Parameter>
					<Name>sender</Name>
					<Abstract type="html">The button</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/close:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
        
        
	</File>
</Tokens>